/*
INCOMPLETE : NaN

PROBLEM :
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million (4000000), find the sum of the even-valued terms.

GLOBAL LIMITS:
  - Min number of values is 2 (3 length)
*/

function fibonacci(exc_max) { // exclusive maximum number
  exc_max = exc_max + 1; // Adjusting for NaN [id same vs length correct]
  let f1 = 1n;
  let f2 = 2n;
  let ary = [NaN, f1, f2]; // array
  let num;
  for (var i = 3; i<exc_max; i++) {
      num = ary[i-2] + ary[i-1];
      ary.push(num);
  }
  return ary;
}

function even_sum(ary) { // type: Array
    let ans = 0n;
    ary.forEach(function(num){
      if (!Number.isNaN(num)) { // WTF
        num = BigInt(num);
          if (!(num % 2n)) ans += num;
      }
    })
    return Number(ans);
}

function run(exc_max) {
    let a = fibonacci(exc_max);
    let b = even_sum(a);
    console.log(a, "Number:", a.length-1);
    return b;
}

console.log(run(10));